version: '3.8'

services:
  admin:
    build:
      context: ./my-ecommerce-admin
      dockerfile: Dockerfile
    container_name: ecommerce_admin
    restart: always
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ecommerce
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - PORT=3000
      - NODE_ENV=production
    volumes:
      - ./my-ecommerce-admin:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    command: >
      sh -c "echo 'Waiting for database...' &&
             sleep 10 &&
             npx prisma generate &&
             npx prisma db push &&
             npm run build && 
             npm start"

  customer:
    build:
      context: ./my-ecommerce-customer
      dockerfile: Dockerfile
    container_name: ecommerce_customer
    restart: always
    ports:
      - "3001:3001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ecommerce
      - PORT=3001
      - HOSTNAME=0.0.0.0
      - NODE_ENV=production
    volumes:
      - ./my-ecommerce-customer:/app
      - /app/node_modules
    depends_on:
      - postgres
      - admin
    command: >
      sh -c "sleep 60 &&
             npm run build && 
             node .next/standalone/server.js"
    networks:
      - app_network

  postgres:
    image: postgres:14-alpine
    container_name: ecommerce_postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ecommerce
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
